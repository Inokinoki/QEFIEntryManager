name: Build Linux x64 AppImage and deb

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: Build
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            qt-ver: 5
            qt-pkg: qtbase5-dev qttools5-dev
          - os: ubuntu-24.04
            qt-ver: 6
            qt-pkg: qt6-base-dev qt6-tools-dev
    runs-on: ${{matrix.os}}

    steps:
    - uses: actions/checkout@v2
      with:
         submodules: true

    - name: Show libc version
      run: ls -l /lib/x86_64-linux-gnu/libc.so.6

    - name: Install libefivar, libefiboot and their dev files
      run: |
        sudo apt update -y
        sudo apt install -y ${{matrix.qt-pkg}} fuse

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_PACKAGING=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Packaging
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        export QMAKE=/usr/lib/qt${{matrix.qt-ver}}/bin/qmake
        make install DESTDIR=AppDir
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod +x linuxdeploy*.AppImage
        ./linuxdeploy-x86_64.AppImage --appdir AppDir --plugin qt --output appimage
        mv EFI_Entry_Manager-x86_64.AppImage EFI_Entry_Manager-x86_64-Qt${{matrix.qt-ver}}.AppImage

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4
      with:
        # Artifact name
        name: QEFI Entry Manager x86_64 AppImage Qt${{matrix.qt-ver}}
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{github.workspace}}/build/EFI_Entry_Manager-x86_64-Qt${{matrix.qt-ver}}.AppImage
    
    - name: Packaging Debian
      working-directory: ${{github.workspace}}/build
      run: cpack -G DEB

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4
      with:
        # Artifact name
        name: QEFI Entry Manager x86_64 deb Qt${{matrix.qt-ver}}
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{github.workspace}}/build/*.deb
